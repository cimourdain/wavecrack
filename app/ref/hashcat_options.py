from app.ref.hashes_list import HASHS_LIST
from app.helpers.rules import RulesHelper

ATTACK_MODES = {
    "0": "Straight",
    "1": "Combination",
    "3": "Brute-force",
    "6": "Hybrid Wordlist + Mask",
    "7": "Hybrid Mask + Wordlist",
}

OUTFILES_FORMAT = {
    "1": "hash[:salt]",
    "2": "plain",
    "3": "hash[:salt]:plain",
    "4": "hex_plain",
    "5": "hash[:salt]:hex_plain",
    "6": "plain:hex_plain",
    "7": "hash[:salt]:plain:hex_plain",
    "8": "crackpos",
    "9": "hash[:salt]:crack_pos",
    "10": "plain:crack_pos",
    "11": "hash[:salt]:plain:crack_pos",
    "12": "hex_plain:crack_pos",
    "13": "hash[:salt]:hex_plain:crack_pos",
    "14": "plain:hex_plain:crack_pos",
    "15": "hash[:salt]:plain:hex_plain:crack_pos",
}

RULES_FILES = RulesHelper.get_rules_files()

DEBUG_MODES ={
    "1": "Finding - Rule",
    "2": "Original - Word",
    "3": "Original - Word:Finding - Rule",
    "4": "Original - Word:Finding - Rule:Processed - Word",
}

HASHCAT_OPTIONS = {
        "--hash-type": {
                "short": "-m",
                "type": "Num",
                "values": HASHS_LIST,
                "description": "Hash-type, see references below",
                "example": "-m 1000",
        },
        "--attack-mode": {
                "short": "-a",
                "type": "Num",
                "values": ATTACK_MODES,
                "description": "Attack-mode, see references below",
                "example": "-a 3",
        },
        "--version": {
                "short": "-V",
                "type": None,
                "description": "Print version",
                "example": "",
        },
        "--help": {
                "short": "-h",
                "type": None,
                "description": "Print help",
                "example": "",
        },
        "--quiet": {
                "short": None,
                "type": None,
                "description": "Suppress output",
                "example": "",
        },
        "--hex-charset": {
                "short": None,
                "type": None,
                "description": "Assume charset is given in hex",
                "example": "",
        },
        "--hex-salt": {
                "short": None,
                "type": None,
                "description": "Assume salt is given in hex",
                "example": "",
        },
        "--hex-wordlist": {
                "short": None,
                "type": None,
                "description": "Assume words in wordlist are given in hex",
                "example": "",
        },
        "--force": {
                "short": None,
                "type": None,
                "description": "Ignore warnings",
                "example": "",
        },
        "--status": {
                "short": None,
                "type": None,
                "description": "Enable automatic update of the status screen",
                "example": "",
        },
        "--status-timer": {
                "short": None,
                "type": "Num",
                "description": "Sets seconds between status screen updates to X",
                "example": "--status-timer=1",
        },
        "--machine-readable": {
                "short": None,
                "type": None,
                "description": "Display the status view in a machine-readable format",
                "example": "",
        },
        "--keep-guessing": {
                "short": None,
                "type": None,
                "description": "Keep guessing the hash after it has been cracked",
                "example": "",
        },
        "--self-test-disable": {
                "short": None,
                "type": None,
                "description": "Disable self-test functionality on startup",
                "example": "",
        },
        "--loopback": {
                "short": None,
                "type": None,
                "description": "Add new plains to induct directory",
                "example": "",
        },
        "--markov-hcstat": {
                "short": None,
                "type": "File",
                "description": "Specify hcstat file to use",
                "example": "--markov-hc=my.hcstat",
        },
        "--markov-disable": {
                "short": None,
                "type": None,
                "description": "Disables markov-chains, emulates classic brute-force",
                "example": "",
        },
        "--markov-classic": {
                "short": None,
                "type": None,
                "description": "Enables classic markov-chains, no per-position",
                "example": "",
        },
        "--markov-threshold": {
                "short": "-t",
                "type": "Num",
                "description": "Threshold X when to stop accepting new markov-chains",
                "example": "-t 50",
        },
        "--runtime": {
                "short": None,
                "type": "Num",
                "description": "Abort session after X seconds of runtime",
                "example": "--runtime=10",
        },
        "--session": {
                "short": None,
                "type": "Str",
                "description": "Define specific session name",
                "example": "--session=mysession",
        },
        "--restore": {
                "short": None,
                "type": None,
                "description": "Restore session from --session",
                "example": "",
        },
        "--restore-disable": {
                "short": None,
                "type": None,
                "description": "Do not write restore file",
                "example": "",
        },
        "--restore-file-path": {
                "short": None,
                "type": "File",
                "description": "Specific path to restore file",
                "example": "--restore-file-path=x.restore",
        },
        "--outfile": {
                "short": "-o",
                "type": "File",
                "description": "Define outfile for recovered hash",
                "example": "-o outfile.txt",
        },
        "--outfile-format": {
                "short": None,
                "type": "Num",
                "values": OUTFILES_FORMAT,
                "description": "Define outfile-format X for recovered hash",
                "example": "--outfile-format=7",
        },
        "--outfile-autohex-disable": {
                "short": None,
                "type": None,
                "description": "Disable the use of $HEX[] in output plains",
                "example": "",
        },
        "--outfile-check-timer": {
                "short": None,
                "type": "Num",
                "description": "Sets seconds between outfile checks to X",
                "example": "--outfile-check=30",
        },
        "--wordlist-autohex-disable": {
                "short": None,
                "type": None,
                "description": "Disable the conversion of $HEX[] from the wordlist",
                "example": "",
        },
        "--separator": {
                "short": "-p",
                "type": "Char",
                "description": "Separator char for hashlists and outfile",
                "example": "-p :",
        },
        "--stdout": {
                "short": None,
                "type": None,
                "description": "Do not crack a hash, instead print candidates only",
                "example": "",
        },
        "--show": {
                "short": None,
                "type": None,
                "description": "Compare hashlist with potfile; show cracked hashes",
                "example": "",
        },
        "--left": {
                "short": None,
                "type": None,
                "description": "Compare hashlist with potfile; show uncracked hashes",
                "example": "",
        },
        "--username": {
                "short": None,
                "type": None,
                "description": "Enable ignoring of usernames in hashfile",
                "example": "",
        },
        "--remove": {
                "short": None,
                "type": None,
                "description": "Enable removal of hashes once they are cracked",
                "example": "",
        },
        "--remove-timer": {
                "short": None,
                "type": "Num",
                "description": "Update input hash file each X seconds",
                "example": "--remove-timer=30",
        },
        "--potfile-disable": {
                "short": None,
                "type": None,
                "description": "Do not write potfile",
                "example": "",
        },
        "--potfile-path": {
                "short": None,
                "type": "File",  # File and not Dir as mentioned in doc
                "description": "Specific path to potfile",
                "example": "--potfile-path=my.pot",
        },
        # "--encoding-from": {
        #         "short": None,
        #         "type": "Code",
        #         "description": "Force internal wordlist encoding from X",
        #         "example": "--encoding-from=iso-8859-15",
        # },
        # "--encoding-to": {
        #         "short": None,
        #         "type": "Code",
        #         "description": "Force internal wordlist encoding to X",
        #         "example": "--encoding-to=utf-32le",
        # },
        "--debug-mode": {
                "short": None,
                "type": "Num",
                "values": DEBUG_MODES,
                "description": "Defines the debug mode (hybrid only by using rules)",
                "example": "--debug-mode=4",
        },
        "--debug-file": {
                "short": None,
                "type": "File",
                "description": "Output file for debugging rules",
                "example": "--debug-file=good.log",
        },
        "--induction-dir": {
                "short": None,
                "type": "Dir",
                "description": "Specify the induction directory to use for loopback",
                "example": "--induction=inducts",
        },
        "--outfile-check-dir": {
                "short": None,
                "type": "Dir",
                "description": "Specify the outfile directory to monitor for plains",
                "example": "--outfile-check-dir=x",
        },
        "--logfile-disable": {
                "short": None,
                "type": None,
                "description": "Disable the logfile",
                "example": "",
        },
        "--hccapx-message-pair": {
                "short": None,
                "type": "Num",
                "description": "Load only message pairs from hccapx matching X",
                "example": "--hccapx-message-pair=2",
        },
        "--nonce-error-corrections": {
                "short": None,
                "type": "Num",
                "description": "The BF size range to replace AP's nonce last bytes",
                "example": "--nonce-error-corrections=16",
        },
        "--truecrypt-keyfiles": {
                "short": None,
                "type": "File",
                "description": "Keyfiles to use, separated with commas",
                "example": "--truecrypt-key=x.png",
        },
        "--veracrypt-keyfiles": {
                "short": None,
                "type": "File",
                "description": "Keyfiles to use, separated with commas",
                "example": "--veracrypt-key=x.txt",
        },
        "--veracrypt-pim": {
                "short": None,
                "type": "Num",
                "description": "VeraCrypt personal iterations multiplier",
                "example": "--veracrypt-pim=1000",
        },
        "--benchmark": {
                "short": "-b",
                "type": None,
                "description": "Run benchmark of selected hash-modes",
                "example": "",
        },
        "--benchmark-all": {
                "short": None,
                "type": None,
                "description": "Run benchmark of all hash-modes (requires -b)",
                "example": "",
        },
        "--speed-only": {
                "short": None,
                "type": None,
                "description": "Return expected speed of the attack, then quit",
                "example": "",
        },
        "--progress-only": {
                "short": None,
                "type": None,
                "description": "Return ideal progress step size and time to process",
                "example": "",
        },
        "--segment-size": {
                "short": "-c",
                "type": "Num",
                "description": "Sets size in MB to cache from the wordfile to X",
                "example": "-c 32",
        },
        "--bitmap-min": {
                "short": None,
                "type": "Num",
                "description": "Sets minimum bits allowed for bitmaps to X",
                "example": "--bitmap-min=24",
        },
        "--bitmap-max": {
                "short": None,
                "type": "Num",
                "description": "Sets maximum bits allowed for bitmaps to X",
                "example": "--bitmap-max=24",
        },
        "--cpu-affinity": {
                "short": None,
                "type": "Str",
                "description": "Locks to CPU devices, separated with commas",
                "example": "--cpu-affinity=1,2,3",
        },
        "--example-hashes": {
                "short": None,
                "type": None,
                "description": "Show an example hash for each hash-mode",
                "example": "",
        },
        "--opencl-info": {
                "short": "-I",
                "type": None,
                "description": "Show info about detected OpenCL platforms/devices",
                "example": "-I",
        },
        "--opencl-platforms": {
                "short": None,
                "type": "Str",
                "description": "OpenCL platforms to use, separated with commas",
                "example": "--opencl-platforms=2",
        },
        "--opencl-devices": {
                "short": "-d",
                "type": "Str",
                "description": "OpenCL devices to use, separated with commas",
                "example": "-d 1",
        },
        "--opencl-device-types": {
                "short": "-D",
                "type": "Str",
                "description": "OpenCL device-types to use, separated with commas",
                "example": "-D 1",
        },
        "--opencl-vector-width": {
                "short": None,
                "type": "Num",
                "description": "Manually override OpenCL vector-width to X",
                "example": "--opencl-vector=4",
        },
        "--optimized-kernel-enable": {
                "short": "-O",
                "type": None,
                "description": "Enable optimized kernels (limits password length)",
                "example": "",
        },
        "--workload-profile": {
                "short": "-w",
                "type": "Num",
                "description": "Enable a specific workload profile, see pool below",
                "example": "-w 3",
        },
        "--kernel-accel": {
                "short": "-n",
                "type": "Num",
                "description": "Manual workload tuning, set outerloop step size to X",
                "example": "-n 64",
        },
        "--kernel-loops": {
                "short": "-u",
                "type": "Num",
                "description": "Manual workload tuning, set innerloop step size to X",
                "example": "-u 256",
        },
        "--nvidia-spin-damp": {
                "short": None,
                "type": "Num",
                "description": "Workaround NVIDIAs CPU burning loop bug, in percent",
                "example": "--nvidia-spin-damp=50",
        },
        "--gpu-temp-disable": {
                "short": None,
                "type": None,
                "description": "Disable temperature and fanspeed reads and triggers",
                "example": "",
        },
        "--gpu-temp-abort": {
                "short": None,
                "type": "Num",
                "description": "Abort if GPU temperature reaches X degrees Celsius",
                "example": "--gpu-temp-abort=100",
        },
        "--scrypt-tmto": {
                "short": None,
                "type": "Num",
                "description": "Manually override TMTO value for scrypt to X",
                "example": "--scrypt-tmto=3",
        },
        "--skip": {
                "short": "-s",
                "type": "Num",
                "description": "Skip X words from the start",
                "example": "-s 1000000",
        },
        "--limit": {
                "short": "-l",
                "type": "Num",
                "description": "Limit X words from the start + skipped words",
                "example": "-l 1000000",
        },
        "--keyspace": {
                "short": None,
                "type": None,
                "description": "Show keyspace base:mod values and quit",
                "example": "",
        },
        "--rule-left": {
                "short": "-j",
                "type": "Rule",
                "description": "Single rule applied to each word from left wordlist",
                "example": "-j 'c'",
        },
        "--rule-right": {
                "short": "-k",
                "type": "Rule",
                "description": "Single rule applied to each word from right wordlist",
                "example": "-k '^-'",
        },
        "--rules-file": {
                "short": "-r",
                "type": "File",
                "values": RULES_FILES,
                "description": "Multiple rules applied to each word from wordlists",
                "example": "-r rules/best64.rule",
        },
        "--generate-rules": {
                "short": "-g",
                "type": "Num",
                "description": "Generate X random rules",
                "example": "-g 10000",
        },
        "--generate-rules-func-min": {
                "short": None,
                "type": "Num",
                "description": "Force min X functions per rule",
                "example": "",
        },
        "--generate-rules-func-max": {
                "short": None,
                "type": "Num",
                "description": "Force max X functions per rule",
                "example": "",
        },
        "--generate-rules-seed": {
                "short": None,
                "type": "Num",
                "description": "Force RNG seed set to X",
                "example": "",
        },
        "--custom-charset1": {
                "short": "-1",
                "type": "CS",
                "description": "User-defined charset ?1",
                "example": "-1 ?l?d?u",
        },
        "--custom-charset2": {
                "short": "-2",
                "type": "CS",
                "description": "User-defined charset ?2",
                "example": "-2 ?l?d?s",
        },
        "--custom-charset3": {
                "short": "-3",
                "type": "CS",
                "description": "User-defined charset ?3",
                "example": "",
        },
        "--custom-charset4": {
                "short": "-4",
                "type": "CS",
                "description": "User-defined charset ?4",
                "example": "",
        },
        "--increment": {
                "short": "-i",
                "type": None,
                "description": "Enable mask increment mode",
                "example": "",
        },
        "--increment-min": {
                "short": None,
                "type": "Num",
                "description": "Start mask incrementing at X",
                "example": "--increment-min=4",
        },
        "--increment-max": {
                "short": None,
                "type": "Num",
                "description": "Stop mask incrementing at X",
                "example": "--increment-max=8",
        },
}
